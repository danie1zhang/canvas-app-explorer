// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mXv5TZ5SUPGRneH9RoMn6q
// Component: zc_-JZqmkLhAk
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import LearnMoreTool from "../../LearnMoreTool"; // plasmic-import: 50HKxnb8xJ/component
import ScreenshotBackground from "../../ScreenshotBackground"; // plasmic-import: pi3PBoRiWhk/component
import Ratings from "../../Ratings"; // plasmic-import: kZJnDl5cN7jJ7/component
import LinkButton from "../../LinkButton"; // plasmic-import: tr5phcLQqCoEx/component
import AddRemoveButton from "../../AddRemoveButton"; // plasmic-import: JyIyDBiGW-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import "../plasmic__default_style.css"; // plasmic-import: global/defaultcss
import "./plasmic_canvas_app_explorer.css"; // plasmic-import: mXv5TZ5SUPGRneH9RoMn6q/projectcss
import "./PlasmicProductCard.css"; // plasmic-import: zc_-JZqmkLhAk/css

export const PlasmicProductCard__VariantProps = new Array(
  "withReviews",
  "withoutScreenshot"
);

export const PlasmicProductCard__ArgProps = new Array(
  "title",
  "image",
  "ratings",
  "logo",
  "description",
  "children"
);

function PlasmicProductCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const [isRootActive, triggerRootActiveProps] = useTrigger("usePressed", {});
  const triggers = {
    active_root: isRootActive
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        "plasmic_default__all",
        "plasmic_default__div",
        "root_reset_mXv5TZ5SUPGRneH9RoMn6q",
        "ProductCard__root___1U08P",
        {
          ProductCard__root__withReviews___1U08PvvVo9: hasVariant(
            variants,
            "withReviews",
            "withReviews"
          ),

          ProductCard__root__withoutScreenshot___1U08PUtYkz: hasVariant(
            variants,
            "withoutScreenshot",
            "withoutScreenshot"
          )
        }
      )}
      data-plasmic-trigger-props={[triggerRootActiveProps]}
    >
      {false ? (
        <LearnMoreTool
          data-plasmic-name={"learnMoreTool"}
          data-plasmic-override={overrides.learnMoreTool}
          className={classNames(
            "__wab_instance",
            "ProductCard__learnMoreTool__uqWdz"
          )}
        />
      ) : null}
      {(triggers.active_root ? true : false) ? (
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box__fjr2W"
          )}
        >
          {(triggers.active_root ? true : false) ? (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "ProductCard__box__kpIdU"
              )}
            >
              {triggers.active_root ? (
                <span>
                  <span style={{ fontWeight: 700 }}>{"Privacy Agreement"}</span>
                  <React.Fragment>
                    {"\nData Protection Addendum"}
                  </React.Fragment>
                </span>
              ) : (
                "Enter some text"
              )}
            </div>
          ) : null}
        </div>
      ) : null}
      {(triggers.active_root ? true : false) ? (
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box__fGeZt"
          )}
        >
          {(triggers.active_root ? true : false) ? (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "ProductCard__box__t9Ot"
              )}
            >
              {triggers.active_root ? (
                <span>
                  <span style={{ fontWeight: 700 }}>{"Description"}</span>
                  <React.Fragment>
                    {"\nProvides access to the Zoom video conference platform"}
                  </React.Fragment>
                </span>
              ) : (
                "Enter some text"
              )}
            </div>
          ) : null}
        </div>
      ) : null}
      {(triggers.active_root ? true : false) ? (
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box__pdlFp"
          )}
        >
          {(triggers.active_root ? true : false) ? (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "ProductCard__box__pcpps"
              )}
            >
              {triggers.active_root ? (
                <span>
                  <span style={{ fontWeight: 700 }}>{"Tool"}</span>
                  <React.Fragment>{"\nZoom"}</React.Fragment>
                </span>
              ) : (
                "Enter some text"
              )}
            </div>
          ) : null}
        </div>
      ) : null}
      {(triggers.active_root ? true : false) ? (
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box___5MRxG"
          )}
        >
          {(triggers.active_root ? true : false) ? (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "ProductCard__box__tCd2V"
              )}
            >
              {triggers.active_root ? (
                <span>
                  <span style={{ fontWeight: 700 }}>
                    {"Placements in Canvas"}
                  </span>
                  <React.Fragment>{"\nCourse Navigation"}</React.Fragment>
                </span>
              ) : (
                "Enter some text"
              )}
            </div>
          ) : null}
        </div>
      ) : null}
      {(triggers.active_root ? true : false) ? (
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box__oShwi"
          )}
        >
          {(triggers.active_root ? true : false) ? (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "__wab_text",
                "ProductCard__box__wABx5"
              )}
            >
              {triggers.active_root ? (
                <span>
                  <span style={{ fontWeight: 700 }}>{"Support Resources"}</span>
                  <React.Fragment>
                    {"\nITS Teaching with Zoom Guide (link)"}
                  </React.Fragment>
                </span>
              ) : (
                "Enter some text"
              )}
            </div>
          ) : null}
        </div>
      ) : null}
      {(triggers.active_root ? false : true) ? (
        <div
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box__l71Vb",
            {
              ProductCard__box__withReviews__l71VBvvVo9: hasVariant(
                variants,
                "withReviews",
                "withReviews"
              )
            }
          )}
        >
          {(triggers.active_root ? false : true) ? (
            <div
              className={classNames(
                "plasmic_default__all",
                "plasmic_default__div",
                "ProductCard__box__hJJoE"
              )}
            >
              {(triggers.active_root ? false : true)
                ? p.renderPlasmicSlot({
                    defaultContents: (
                      <img
                        alt={""}
                        className={classNames(
                          "plasmic_default__all",
                          "plasmic_default__img",
                          "ProductCard__img___0SrCv"
                        )}
                        role={"img"}
                        src={
                          "/static/plasmic/canvas_app_explorer/images/panoptoLogo2.png"
                        }
                      />
                    ),

                    value: args.logo
                  })
                : null}
            </div>
          ) : null}
        </div>
      ) : null}
      {(triggers.active_root ? false : true)
        ? p.renderPlasmicSlot({
            defaultContents:
              "Panopto is used to record, share and manage videos.",
            value: args.description
          })
        : null}
      {(triggers.active_root ? false : true) ? (
        <ScreenshotBackground
          data-plasmic-name={"screenshotBackground"}
          data-plasmic-override={overrides.screenshotBackground}
          className={classNames(
            "__wab_instance",
            "ProductCard__screenshotBackground__gjUdG",
            {
              ProductCard__screenshotBackground__withReviews__gjUdGvvVo9:
                hasVariant(variants, "withReviews", "withReviews"),
              ProductCard__screenshotBackground__withoutScreenshot__gjUdGutYkz:
                hasVariant(variants, "withoutScreenshot", "withoutScreenshot")
            }
          )}
          image={p.renderPlasmicSlot({
            defaultContents: (
              <img
                alt={""}
                className={classNames(
                  "plasmic_default__all",
                  "plasmic_default__img",
                  "ProductCard__img__z4Zz"
                )}
                role={"img"}
                src={"/static/plasmic/canvas_app_explorer/images/panopto.png"}
              />
            ),

            value: args.image,
            className: classNames("ProductCard__slotImage__bjvkn", {
              ProductCard__slotImage__withoutScreenshot__bjvknutYkz: hasVariant(
                variants,
                "withoutScreenshot",
                "withoutScreenshot"
              )
            })
          })}
        />
      ) : null}
      {(
        triggers.active_root
          ? false
          : hasVariant(variants, "withReviews", "withReviews")
          ? true
          : false
      )
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Ratings
                className={classNames(
                  "__wab_instance",
                  "ProductCard__ratings__yXQd"
                )}
              />
            ),

            value: args.ratings
          })
        : null}
      {(triggers.active_root ? false : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__div",
            "ProductCard__box__sbbu9"
          )}
        >
          {(triggers.active_root ? false : true)
            ? p.renderPlasmicSlot({
                defaultContents: "Title",
                value: args.title,
                className: classNames("ProductCard__slotTitle__kXepm")
              })
            : null}
        </p.Stack>
      ) : null}

      <div
        className={classNames(
          "plasmic_default__all",
          "plasmic_default__div",
          "ProductCard__box__wMuGj"
        )}
      >
        <LinkButton
          className={classNames(
            "__wab_instance",
            "ProductCard__linkButton__cT7H"
          )}
          text={
            (triggers.active_root ? false : true)
              ? p.renderPlasmicSlot({
                  defaultContents: (
                    <AddRemoveButton
                      className={classNames(
                        "__wab_instance",
                        "ProductCard__addRemoveButton___794LZ"
                      )}
                      removeToolFromSite={"removeToolFromSite"}
                    />
                  ),

                  value: args.children
                })
              : null
          }
        />

        <LinkButton
          className={classNames(
            "__wab_instance",
            "ProductCard__linkButton__cX8QG"
          )}
          text={
            <React.Fragment>
              {(triggers.active_root ? false : true) ? (
                <div
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__div",
                    "__wab_text",
                    "ProductCard__box__ihxgX",
                    {
                      ProductCard__box__withReviews__ihxgXvvVo9: hasVariant(
                        variants,
                        "withReviews",
                        "withReviews"
                      ),

                      ProductCard__box__withoutScreenshot__ihxgXutYkz:
                        hasVariant(
                          variants,
                          "withoutScreenshot",
                          "withoutScreenshot"
                        )
                    }
                  )}
                >
                  {"Learn More"}
                </div>
              ) : null}
              {(triggers.active_root ? false : false) ? (
                <svg
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(
                    "plasmic_default__all",
                    "plasmic_default__svg",
                    "ProductCard__svg__kxRR"
                  )}
                  role={"img"}
                />
              ) : null}
            </React.Fragment>
          }
        />
      </div>

      {(triggers.active_root ? true : false) ? (
        <img
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(
            "plasmic_default__all",
            "plasmic_default__img",
            "ProductCard__img__bTZld"
          )}
          role={"img"}
          src={
            triggers.active_root
              ? "/static/plasmic/canvas_app_explorer/images/zoom.png"
              : undefined
          }
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "learnMoreTool", "screenshotBackground", "svg", "img"],
  learnMoreTool: ["learnMoreTool"],
  screenshotBackground: ["screenshotBackground"],
  svg: ["svg"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    learnMoreTool: makeNodeComponent("learnMoreTool"),
    screenshotBackground: makeNodeComponent("screenshotBackground"),
    svg: makeNodeComponent("svg"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
